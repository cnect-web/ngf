<?php

/**
 * @file
 * Contains ngf_core.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\node\NodeInterface;
use Drupal\group\Entity\GroupContent;

use Drupal\Core\Access\AccessResult;

use Drupal\views\Form\ViewsForm;
use Drupal\views\Plugin\views\area\AreaPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\PluginBase;
use Drupal\views\Views;

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\field\Entity\FieldStorageConfig;

use Drupal\Core\Url;
use Drupal\Core\Link;

define('NGF_GROUP_PUBLIC', 0);
define('NGF_GROUP_PRIVATE', 1);

/**
 * Implements hook_help().
 */
function ngf_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ngf_core module.
    case 'help.page.ngf_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Next Generation Futurium Core Functionality') . '</p>';
      return $output;
  }
}

/**
 * Alter the group menu.
 */
function ngf_core_group_operations_alter(&$links, $group) {

  // Move the Create Post action to top.
  if (!empty($links['gnode-create-ngf_post'])) {
    $links['gnode-create-ngf_post']['weight']--;
  }

  // Modify the action link title.
  foreach ($links as $key => $link) {
    $link_title_arg = $link['title']->getArguments();
    if (!empty($link_title_arg['@type'])) {
      $links[$key]['title'] = t('New @type', $link_title_arg);
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function ngf_core_link_alter(&$variables) {
  $url = $variables['url'];
  // Alter the login link text to "Sign In".
  if ($url->isRouted() && $url->getRouteName() == 'user.login') {
    $variables['text'] = t('Sign In');
  }

  // Alter the Group Nodes tab title.
  if ($url->isRouted() && $url->getRouteName() == 'view.group_nodes.page_1') {
    $variables['text'] = t('Content');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ngf_core_form_user_register_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Alter the registration form button text to "Sign Up".
  if (!empty($form['actions']['submit'])) {
    $form['actions']['submit']['#value'] = t('Sign Up');
  }

  // Add the legal agreements message.
  $form['agreements'] = [
    '#markup' => t("By clicking 'Sign up' or using one of the Social Media Login buttons you agree to our <a href=\"/legal/terms-and-conditions\">Terms and Conditions</a> and that you have read our <a href=\"/legal/data-use-policy\">Data Use Policy</a>."),
    '#weight' => 99,
  ];

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ngf_core_form_group_ngf_discussion_group_add_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Alter the submit button to something more friendly.
  $form['actions']['submit']['#value'] = t('Create group');
}

/**
 * Implement hook_node_load().
 */
function ngf_core_node_load(&$nodes) {
  foreach ($nodes as $nid => &$node) {
    $groups = GroupContent::loadByEntity($node);
    if (!empty($groups)) {
      $group = array_pop($groups)->getGroup();
      $node->group = $group;
    }
  }
}

/**
 * Implement hook_node_access().
 */
function ngf_core_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if ($op === 'view') {
    if (!empty($node->group) && $group = $node->group) {
      $groupVisibility = $group->get('field_ngf_group_visibility')->getString();
      // @todo: allow to override per node?
      if ($groupVisibility == NGF_GROUP_PRIVATE && !$group->getMember($account)) {
        return AccessResult::forbidden();
      }
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function ngf_core_entity_type_alter(array &$entity_types) {
  $entity_types['group']->setHandlerClass('access', \Drupal\ngf_core\Entity\Access\NGFGroupAccessControlHandler::class);
  $entity_types['group_content']->setHandlerClass('access', \Drupal\ngf_core\Entity\Access\NGFGroupContentAccessControlHandler::class);
}

/**
 * Implements hook_group_content_info_alter().
 */
function ngf_core_group_content_info_alter(array &$definitions) {
  $definitions['group_membership']['class'] = 'Drupal\ngf_core\Plugin\GroupContentEnabler\NGFGroupContentEnabler';
}

/**
 * Implements hook_entity_extra_field_info().
 */
function ngf_core_entity_extra_field_info() {
  $extra = [];

  $extra['group']['ngf_discussion_group']['display']['group_content_view'] = [
    'label' => t('Group Content View'),
    'description' => t('List of group contents'),
    'weight' => 100,
    'visible' => TRUE,
  ];

  $extra['group']['ngf_discussion_group']['display']['members_and_followers'] = [
    'label' => t('Members and Followers'),
    'description' => t('Links to members and followers'),
    'weight' => 100,
    'visible' => TRUE,
  ];

  $extra['group']['ngf_discussion_group']['display']['join_and_follow'] = [
    'label' => t('Join And Follow'),
    'description' => t('Join and Follow buttons'),
    'weight' => 100,
    'visible' => TRUE,
  ];

  $extra['user']['user']['display']['groups_view'] = [
    'label' => t('User Groups View'),
    'description' => t('List of groups user belongs to'),
    'weight' => 100,
    'visible' => TRUE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ngf_core_group_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

  // View of group content.
  if ($display->getComponent('group_content_view') && $view_mode === 'full') {
    $build['group_content_view'] = [
      '#type' => 'view',
      '#name' => 'group_nodes_view',
      '#display_id' => 'block_1',
      '#arguments' => [
        $entity->id(),
      ],
    ];
  }

  // Members and follower counts.
  if ($display->getComponent('members_and_followers') && $view_mode === 'full') {
    $items = [];
    /**
     * @todo : count followers.
     * @todo : link to proper place.
     */
    // Member count.
    $member_count = count($entity->getMembers());
    $items['group-members'] = Link::fromTextAndUrl(
      \Drupal::translation()->formatPlural($member_count, '1 member', '@count members', array('@count' => $member_count)),
      Url::fromUri('http://google.pt/')
    )
    ->toRenderable();
    $items['group-members']['#attributes']['class'][] = 'group-members-count';

    // Followers count.
    $follower_count = 324;
    $items['group-followers'] = Link::fromTextAndUrl(
      \Drupal::translation()->formatPlural($follower_count, '1 follower', '@count followers', array('@count' => $follower_count)),
      Url::fromUri('http://reddit.com/')
    )
    ->toRenderable();
    $items['group-followers']['#attributes']['class'][] = 'follow-group';

    $build['members_and_followers']['#title'] = '';
    $build['members_and_followers']['#theme'] = 'item_list';
    $build['members_and_followers']['#items'] = $items;
    $build['members_and_followers']['#attributes']['class'][] = 'inline';
  }

  // Join and follow group buttons.
  if ($display->getComponent('join_and_follow') && $view_mode === 'full') {
    /** @var \Drupal\group\Entity\GroupInterface $group */
    $links = $items = [];

    $group = $entity;

    // Retrieve the operations from the installed content plugins.
    foreach ($group->getGroupType()->getInstalledContentPlugins() as $plugin) {
      if ($plugin->getPluginId() == 'group_membership') {
        /** @var \Drupal\group\Plugin\GroupContentEnablerInterface $plugin */
        $links += $plugin->getGroupOperations($group);
      }
    }

    if ($links) {
      // Allow modules to alter the collection of gathered links.
      \Drupal::moduleHandler()->alter('group_operations', $links, $group);

      // Sort the operations by weight.
      uasort($links, '\Drupal\Component\Utility\SortArray::sortByWeightElement');

      foreach ($links as $key => $value) {
        $value['title'] = str_replace(' group', '', $value['title']);
        $items[$key]['#title'] = $value['title'];
        $items[$key]['#url'] = $value['url'];
        $items[$key]['#type'] = 'link';
        $items[$key]['#attributes']['class'][] = $key;
        $items[$key]['#attributes']['class'][] = "btn";
        $items[$key]['#attributes']['class'][] = "button-link";
      }

      // Follow flag dummy button.
      // @todo: replace with real flag.
      $items['group-follow'] = Link::fromTextAndUrl(t('Follow'), Url::fromUri('http://ngf.dev.europa.eu/'))->toRenderable();
      $items['group-follow']['#attributes']['class'][] = 'follow-group';
      $items['group-follow']['#attributes']['class'][] = "btn";
      $items['group-follow']['#attributes']['class'][] = "button-link";

      // Create an operations element with all of the links.
      $build['join_and_follow']['#title'] = '';
      $build['join_and_follow']['#theme'] = 'item_list';
      $build['join_and_follow']['#items'] = $items;
      $build['join_and_follow']['#attributes']['class'][] = 'inline';
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ngf_core_user_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('groups_view') && $view_mode === 'full') {

    $build['groups_view']['title'] = [
      '#type' => 'markup',
      '#markup' => '<h2>' . t('My Groups') . '</h2>',
    ];

    $build['groups_view']['view'] = [
      '#type' => 'view',
      '#name' => 'group_user_groups',
      '#display_id' => 'block_1',
      '#arguments' => [
        $entity->id(),
      ],
    ];
  }
}

/**
 * Implements hook_form_alter().
 */
function ngf_core_form_group_ngf_event_add_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // NGF-65 : Set default text for registration link and make the field readonly.
  $form['field_ngf_registration_link']['widget'][0]['title']['#attributes']['readonly'] = 'readonly';
  $form['field_ngf_registration_link']['widget'][0]['title']['#value'] = t('Register');

  // Add additional validation for end date.
  $form['field_ngf_event_end_date']['#element_validate'][] = '_ngf_core_event_end_date_validate';
}

function _ngf_core_event_end_date_validate($element, &$form_state) {
  // NGF-67: Start date can't be greater than End date.
  $start_date = NULL;
  if (!empty($form_state->getValue('field_ngf_event_start_date')[0]['value'])) {
    $start_date = $form_state->getValue('field_ngf_event_start_date')[0]['value']->getTimestamp();
  }
  $end_date = NULL;
  if (!empty($form_state->getValue('field_ngf_event_end_date')[0]['value'])) {
    $end_date = $form_state->getValue('field_ngf_event_end_date')[0]['value']->getTimestamp();
  }

  if (!empty($end_date) && !empty($start_date) && $start_date > $end_date) {
    $form_state->setError(
      $element,
      t('The event start date %start_date must be greater than the event end date %end_date.', [
        '%start_date' => $form_state->getValue('field_ngf_event_start_date')[0]['value']->format('Y-m-d H:i:s'),
        '%end_date' => $form_state->getValue('field_ngf_event_end_date')[0]['value']->format('Y-m-d H:i:s'),
      ])
    );
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function ngf_core_taxonomy_term_insert(Drupal\Core\Entity\EntityInterface $term) {
  if ($term->bundle() == 'ngf_interests') {
    $term->set('field_ngf_creator', \Drupal::currentUser()->id());
    $term->save();
  }
}

/**
 * Set dynamic allowed values for the group visibility field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function ngf_core_group_visiblity_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable){
  return [
    NGF_GROUP_PUBLIC => t("Public"),
    NGF_GROUP_PRIVATE => t("Private")
  ];
}

/**
 * Sets the default value for the group visibility field.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The entity being created.
 * @param \Drupal\Core\Field\FieldDefinitionInterface $definition
 *   The field definition.
 *
 * @return array
 *   An array of default value keys with each entry keyed with the “value” key.
 *
 * @see \Drupal\Core\Field\FieldConfigBase::getDefaultValue()
 */
function ngf_core_group_visiblity_default_value(ContentEntityInterface $entity, FieldDefinitionInterface $definition) {
  $default = NGF_GROUP_PUBLIC;

  return [
    ['value' => $default],
  ];
}
