<?php

/**
 * @file
 * Contains ngf_core.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\node\NodeInterface;
use Drupal\group\Entity\GroupContent;

use Drupal\Core\Access\AccessResult;

use Drupal\Core\Plugin\Context\Context;
use Drupal\Core\Plugin\Context\ContextDefinition;
use Drupal\Core\Plugin\Context\ContextProviderInterface;

use Drupal\views\Form\ViewsForm;
use Drupal\views\Plugin\views\area\AreaPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\PluginBase;
use Drupal\views\Views;

define('NGF_GROUP_PUBLIC', 0);
define('NGF_GROUP_PRIVATE', 1);

/**
 * Implements hook_help().
 */
function ngf_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ngf_core module.
    case 'help.page.ngf_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Next Generation Futurium Core Functionality') . '</p>';
      return $output;
  }
}

/**
 * Alter the group menu.
 */
function ngf_core_group_operations_alter(&$links, $group) {

  // Move the Create Post action to top.
  if (isset($links['gnode-create-ngf_post'])) {
    $links['gnode-create-ngf_post']['weight']--;
  }

  // Modify the action link title.
  foreach ($links as $key => $link) {
    $link_title_arg = $link['title']->getArguments();
    if (isset($link_title_arg['@type'])) {
      $links[$key]['title'] = t('New @type', $link_title_arg);
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function ngf_core_link_alter(&$variables) {
  $url = $variables['url'];
  // Alter the login link text to "Sign In"
  if ($url->isRouted() && $url->getRouteName() == 'user.login') {
    $variables['text'] = t('Sign In');
  }

  // Alter the Group Nodes tab title.
  if ($url->isRouted() && $url->getRouteName() == 'view.group_nodes.page_1') {
    $variables['text'] = t('Content');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ngf_core_form_user_register_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Alter the registration form button text to "Sign Up".
  if (isset($form['actions']['submit'])) {
    $form['actions']['submit']['#value'] = t('Sign Up');
  }

  // Add the legal agreements message.
  $form['agreements'] = [
    '#markup' => t("By clicking 'Sign up' or using one of the Social Media Login buttons you agree to our <a href=\"/legal/terms-and-conditions\">Terms and Conditions</a> and that you have read our <a href=\"/legal/data-use-policy\">Data Use Policy</a>."),
    '#weight' => 99,
  ];

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ngf_core_form_group_ngf_discussion_group_add_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Alter the submit button to something more friendly.
  $form['actions']['submit']['#value'] = t('Create group');
}

/**
 * Implement hook_node_load().
 */
function ngf_core_node_load(&$nodes) {
  foreach ($nodes as $nid => &$node) {
    $groups = GroupContent::loadByEntity($node);
    if (!empty($groups)) {
      $group = array_pop($groups)->getGroup();
      $node->group = $group;
    }
  }
}

/**
 * Implement hook_node_access().
 */
function ngf_core_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if ($op === 'view') {
    if (isset($node->group) && $group = $node->group) {
      $groupVisibility = $group->get('field_ngf_group_visibility')->getString();
      // @todo: allow to override per node?
      if ($groupVisibility == NGF_GROUP_PRIVATE && !$group->getMember($account)) {
        return AccessResult::forbidden();
      }
    }
  }
}

/**
 * Implement template_preprocess_node().
 */
function ngf_core_preprocess_node(&$variables) {
  $context = \Drupal::service('context.repository');
  $groupContext = $context->getRuntimeContexts(['@group.group_route_context:group']);
  $groupContext['@group.group_route_context:group']->getContextData()->getValue();

  $node = $variables['elements']['#node'];
  if (isset($node->group)) {
    $variables['group_name'] = $node->group->label();
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function ngf_core_entity_type_alter(array &$entity_types) {
  $entity_types['group']->setHandlerClass('access', \Drupal\ngf_core\Entity\Access\NGFGroupAccessControlHandler::class);
  $entity_types['group_content']->setHandlerClass('access', \Drupal\ngf_core\Entity\Access\NGFGroupContentAccessControlHandler::class);
}

/**
 * Implements hook_group_content_info_alter().
 */
function ngf_core_group_content_info_alter(array &$definitions) {
  $definitions['group_membership']['class'] = 'Drupal\ngf_core\Plugin\GroupContentEnabler\NGFGroupContentEnabler';
}

/**
 * Implements hook_entity_extra_field_info().
 */
function ngf_core_entity_extra_field_info() {
  $extra = array();

  $extra['group']['ngf_discussion_group']['display']['group_content_view'] = array(
    'label' => t('Group Content View'),
    'description' => t('List of group contents'),
    'weight' => 100,
    'visible' => TRUE,
  );


  $extra['user']['user']['display']['groups_view'] = array(
    'label' => t('User Groups View'),
    'description' => t('List of groups user belongs to'),
    'weight' => 100,
    'visible' => TRUE,
  );

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ngf_core_group_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('group_content_view') && $view_mode === 'full') {
    $build['group_content_view'] = [
      '#type' => 'view',
      '#name' => 'group_nodes_view',
      '#display_id' => 'block_1',
      '#arguments' => [
        $entity->id(),
      ],
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ngf_core_user_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('groups_view') && $view_mode === 'full') {

    $build['groups_view']['title'] = [
      '#type' => 'markup',
      '#markup' => '<h2>' . t('My Groups') . '</h2>',
    ];

    $build['groups_view']['view'] = [
      '#type' => 'view',
      '#name' => 'group_user_groups',
      '#display_id' => 'block_1',
      '#arguments' => [
        $entity->id(),
      ],
    ];
  }
}

/**
 * Implements hook_form_alter().
 */
function ngf_core_form_group_ngf_event_add_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // NGF-65 : Set default text for registration link and make the field readonly.
  $form['field_ngf_registration_link']['widget'][0]['title']['#attributes']['readonly'] = 'readonly';
  $form['field_ngf_registration_link']['widget'][0]['title']['#value'] = t('Register');

  // Add additional validation for end date.
  $form['field_ngf_event_end_date']['#element_validate'][] = '_ngf_content_event_end_date_validate';
}

function _ngf_content_event_end_date_validate($element, &$form_state) {
  // NGF-67: Start date can't be greater than End date.
  $start_date = NULL;
  if (!empty($form_state->getValue('field_ngf_event_start_date')[0]['value'])) {
    $start_date = $form_state->getValue('field_ngf_event_start_date')[0]['value']->getTimestamp();
  }
  $end_date = NULL;
  if (!empty($form_state->getValue('field_ngf_event_end_date')[0]['value'])) {
    $end_date = $form_state->getValue('field_ngf_event_end_date')[0]['value']->getTimestamp();
  }

  if (!empty($end_date) && !empty($start_date) && $start_date > $end_date) {
    $form_state->setError(
      $element,
      t('The event start date %start_date must be greater than the event end date %end_date.', [
        '%start_date' => $form_state->getValue('field_ngf_event_start_date')[0]['value']->format('Y-m-d H:i:s'),
        '%end_date' => $form_state->getValue('field_ngf_event_end_date')[0]['value']->format('Y-m-d H:i:s'),
      ])
    );
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function ngf_content_taxonomy_term_insert(TermInterface $term) {
  if ($term->bundle() == 'ngf_interests') {
    $term->set('field_ngf_creator', \Drupal::currentUser()->id());
    $term->save();
  }
}
