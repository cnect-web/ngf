<?php

/**
 * @file
 * Contains ngf_core.module.
 */

use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormBuilder;
use Drupal\Core\Form\FormStateInterface;
use CommerceGuys\Addressing\AddressFormat\AddressField;
use Drupal\Core\Link;

/**
 * Implements hook_help().
 */
function ngf_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ngf_core module.
    case 'help.page.ngf_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Next Generation Futurium Core Functionality') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu_alter().
 */
function ngf_core_link_alter(&$variables) {
  $url = $variables['url'];
  // Alter the login link text to "Sign In".
  if ($url->isRouted() && $url->getRouteName() == 'user.login') {
    $variables['text'] = t('Sign In');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ngf_core_form_group_ngf_event_add_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  _ngf_core_event_ngf_registration_link_validation_helper($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ngf_core_form_group_ngf_event_ggroup_form_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  _ngf_core_event_ngf_registration_link_validation_helper($form);

  // NGF-362: Create event submit button.
  $form['actions']['submit']['#value'] = t('Create Event');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ngf_core_form_group_ngf_session_ggroup_form_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // NGF-362: Create event submit button.
  $form['actions']['submit']['#value'] = t('Create Session');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ngf_core_form_group_ngf_event_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  _ngf_core_event_ngf_registration_link_validation_helper($form);
}

/**
 * Helper for states and field validation for event registration link.
 */
function _ngf_core_event_ngf_registration_link_validation_helper(&$form) {
  $form['field_ngf_registration_link']['widget'][0]['title']['#states'] = [
    'visible' => [
      ':input[name="field_ngf_registration_link[0][uri]"]' => ['!value' => ''],
    ],
  ];
  array_unshift($form['field_ngf_registration_link']['widget'][0]['#element_validate'], '_ngf_core_event_ngf_registration_link_validate');
}

/**
 * Validation callback for event registration link.
 *
 * @see NGF-65 : Set fallback text for registration link if the url is set and
 * the title is empty.
 */
function _ngf_core_event_ngf_registration_link_validate(&$element, &$form_state) {
  $values = $form_state->getValue('field_ngf_registration_link');
  if (!empty($values[0]['uri']) && empty($values[0]['title'])) {
    $values[0]['title'] = t('Register');
    $element['title']['#value'] = t('Register');
    $form_state->setValue('field_ngf_registration_link', $values);
  }
}

/**
 * Validation callback for event date fields.
 */
function _ngf_core_event_end_date_validate($element, &$form_state) {
  // NGF-67: Start date can't be greater than End date.
  $start_date = NULL;
  if (!empty($form_state->getValue('field_ngf_event_start_date')->value) && !empty($form_state->getValue('field_ngf_event_start_date')->value['object'])) {
    $start_date = $form_state->getValue('field_ngf_event_start_date')->value->getTimestamp();
  }
  $end_date = NULL;
  if (!empty($form_state->getValue('field_ngf_event_end_date')->value) && !empty($form_state->getValue('field_ngf_event_start_date')->value['object'])) {
    $end_date = $form_state->getValue('field_ngf_event_end_date')->value->getTimestamp();
  }

  if (!empty($end_date) && !empty($start_date) && $start_date > $end_date) {
    $form_state->setError(
      $element,
      t('The event start date %start_date must be greater than the event end date %end_date.', [
        '%start_date' => $form_state->getValue('field_ngf_event_start_date')->value->format('Y-m-d H:i:s'),
        '%end_date' => $form_state->getValue('field_ngf_event_end_date')->value->format('Y-m-d H:i:s'),
      ])
    );
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function ngf_core_taxonomy_term_insert(Drupal\taxonomy\Entity\Term $term) {
  if ($term->bundle() == 'ngf_interests') {
    $term->set('field_ngf_creator', \Drupal::currentUser()->id());
    $term->save();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function ngf_core_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Use a different page template is the user is anonymous.
  if (\Drupal::currentUser()->isAnonymous()) {

    $path = \Drupal::service('path.current')->getPath();

    // But only in some pages.
    $patterns_array = [
      '<front>',
      '/join',
      '/contact',
      '/user/password',
      '/user/login'
    ];

    $patterns = implode($patterns_array, "\n");

    if (\Drupal::service('path.matcher')->matchPath($path, $patterns)) {
      $suggestions[] = 'page__front__anonymous';
    }
  }
}

/**
 * Implements hook_theme() to add the template definition.
 **/
function ngf_core_theme($existing, $type, $theme, $path) {
  return [
    'login_account_block' => [
      'variables' => [
        'user_picture' => NULL,
        'default_user_picture' => NULL,
        'user_name' => NULL,
        'user_profile_link' => NULL,
        'user_manage_network_link' => NULL,
        'user_logout_link' => NULL,
      ],
    ]
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ngf_core_form_contact_message_feedback_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['copy']['#access'] = FALSE;
  $form['actions']['preview']['#access'] = FALSE;
}

/**
 * Implements hook_address_fields_labels_alter().
 *
 * Change "Company" field label to "Venue name".
 */
function ngf_core_address_fields_labels_alter(&$labels) {
  $labels[AddressField::ORGANIZATION] = t('Venue name', [], ['context' => 'Address label']);
}

/**
 * Implements hook_library_info_alter().
 *
 * Override the time picker to prevent that seconds picks up current time.
 */
function ngf_core_library_info_alter(array &$libraries, $module) {
  if (isset($libraries['datetimepicker'])) {
    unset($libraries['datetimepicker']['js']['js/drupal.single_datetime.js']);
    $libraries['datetimepicker']['js'] += ['/' . drupal_get_path('module', 'ngf_core') . '/js/datepicker_override.js' => []];
  }
}

/*
 * Implements template_preprocess_breadcrumb().
 *
 * Set cache per url for breadcrumbs.
 */
function ngf_core_preprocess_breadcrumb(&$variables) {
  $variables['#cache']['contexts'][] = 'url';
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function ngf_core_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  $request     = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title       = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

  $breadcrumb->addLink(Link::createFromRoute($title, '<nolink>'));
}

/**
 * Implements template_preprocess_block().
 */
function ngf_core_preprocess_block(&$vars) {
  if($vars['plugin_id'] == 'system_menu_block:main') {
    $vars['#cache']['max-age'] = 0;
  }
}

/**
 * Implements hook_migration_plugins_alter().
 */
function ngf_core_migration_plugins_alter(&$definitions) {
  $migrations = [
    'ngf_interests',
  ];

  foreach ($migrations as $migration) {
    $definitions[$migration]['source']['path'] = drupal_get_path('module', 'ngf_core') . $definitions[$migration]['source']['path'];
  }
}