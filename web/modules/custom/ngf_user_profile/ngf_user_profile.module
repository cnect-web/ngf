<?php

/**
 * @file
 * Contains ngf_user_profile.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\comment\Entity\Comment;
use Drupal\group\Entity\GroupContent;
use Drupal\group\Entity\Group;
use Drupal\node\Entity\Node;
use Drupal\ngf_user_profile\Plugin\Field\FieldType\FullNameFieldItemList;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_node_insert().
 */
function ngf_user_profile_node_insert(Node $node) {
  if (in_array($node->getType(), ['ngf_discussion'])) {

    /** @var Drupal\ngf_user_profile\Manager\NotificationManager $notification_manager */
    $notification_manager = \Drupal::getContainer()
      ->get('ngf_user_profile.notification_manager');
    $notification_manager->notifyFollowersAboutNewContent($node);

    /** @var Drupal\ngf_user_profile\Manager\UserFeedManager $userFeedManager */
    $userFeedManager = \Drupal::getContainer()
      ->get('ngf_user_profile.user_feed_manager');
    $userFeedManager->createContentUserFeed($node);

  }
}

/**
 * Implements hook_group_content_insert().
 */
function ngf_user_profile_group_content_insert(GroupContent $group_content) {
  /** @var Drupal\ngf_user_profile\Manager\UserFeedManager $userFeedManager */
  $userFeedManager = \Drupal::getContainer()
    ->get('ngf_user_profile.user_feed_manager');
  $userFeedManager->createGroupContentUserFeeds($group_content);
}

/**
 * Implements hook_comment_insert().
 */
function ngf_user_profile_comment_insert(Comment $comment) {
  if ($comment->getCommentedEntityTypeId() == 'node' && in_array($comment->getCommentedEntity()
      ->getType(), ['ngf_discussion'])) {

    /** @var Drupal\ngf_user_profile\Manager\NotificationManager $notification_manager */
    $notification_manager = \Drupal::getContainer()
      ->get('ngf_user_profile.notification_manager');
    $notification_manager->notifyOwnerAboutNewComment($comment);

    /** @var Drupal\ngf_user_profile\Manager\UserFeedManager $userFeedManager */
    $userFeedManager = \Drupal::getContainer()
      ->get('ngf_user_profile.user_feed_manager');
    $userFeedManager->createCommentUserFeed($comment);

  }
}

/**
 * Implements hook_group_insert().
 */
function ngf_user_profile_group_insert(Group $group) {
  /** @var Drupal\ngf_user_profile\Manager\UserFeedManager $userFeedManager */
  $userFeedManager = \Drupal::getContainer()
    ->get('ngf_user_profile.user_feed_manager');
  $userFeedManager->createGroupUserFeeds($group);
}

/**
 * Implements hook_entity_base_field_info().
 */
function ngf_user_profile_entity_base_field_info($entity_type) {
  if ($entity_type->id() === 'user') {
    $fields = [];

    $fields['full_name'] = BaseFieldDefinition::create('string')
      ->setName('full_name')
      ->setLabel(t('Full name'))
      ->setComputed(TRUE)
      ->setClass(FullNameFieldItemList::class)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'weight' => -5,
      ]);

    return $fields;
  }
}

/**
 * Implements hook_entity_type_build().
 */
function ngf_user_profile_entity_type_build(array &$entity_types) {
  // We set ngf_interests form view mode. So, we can load as a separate form
  // in the custom page.
  $view_modes = ['ngf_interests', 'ngf_general_settings'];
  foreach ($view_modes as $view_mode) {
    $entity_types['user']->setFormClass($view_mode,
    'Drupal\user\ProfileForm');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ngf_user_profile_form_user_ngf_interests_form_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id
) {
  $form['field_ngf_interests']['widget']['add_more']['#attributes']['class'][] = 'btn btn--blue';
  $form['actions']['submit']['#attributes']['class'][] = 'btn btn--green';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ngf_user_profile_form_contact_message_personal_form_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id
) {
  $form['mail']['#access'] = FALSE;
  $form['recipient']['#access'] = FALSE;
  $form['name']['#access'] = FALSE;
  $form['copy']['#access'] = FALSE;
  $form['actions']['preview']['#access'] = FALSE;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function ngf_user_profile_entity_extra_field_info() {
  $extra = [];
  $extra['user']['user']['display']['action_panel'] = [
    'label' => t('Action panel'),
    'description' => t('Display the button to perform some actions'),
    'weight' => 100,
    'visible' => TRUE,
  ];
  $extra['user']['user']['display']['followers_panel'] = [
    'label' => t('Followers'),
    'description' => t('Display the number of users you follow and which follow you'),
    'weight' => 100,
    'visible' => TRUE,
  ];
  $extra['user']['user']['display']['qr_code'] = [
    'label' => t('QR code'),
    'description' => t('QR code'),
    'weight' => 100,
    'visible' => TRUE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ngf_user_profile_user_view(
  array &$build,
  EntityInterface $entity,
  EntityViewDisplayInterface $display,
  $view_mode
) {

  $current_user = \Drupal::currentUser();

  if ($view_mode == 'ngf_profile') {
    $user_id = $entity->id();

    // Show QR code.
    if ($display->getComponent('qr_code')) {
      $block_manager = \Drupal::service('plugin.manager.block');
      // You can hard code configuration or you load from settings.
      $plugin_block = $block_manager->createInstance('Google QR Code', []);
      $build['qr_code'] = $plugin_block->build();
    }

    // Show action panel.
    if ($display->getComponent('action_panel')) {
      $items = [];
      if ($user_id != $current_user->id()) {
        $items[] = [
          '#type' => 'link',
          '#url' => Url::fromRoute('ngf_user_profile.page.user_contact', [
            'user' => $user_id,
          ]),
          '#title' => t('Contact'),
          '#attributes' => [
            'class' => [
              'profile__actions--contact',
            ],
          ],
        ];
        $items[] = [
          '#type' => 'link',
          '#url' => new Url('ngf_user_list.add_user', [
            'user' => $user_id,
          ]),
          '#title' => t('Add to list'),
          '#attributes' => [
            'data-dialog-options' => '{"width":400,"height":300}',
            'class' => [
              'use-ajax',
              'profile__actions--add2list',
            ],
            'data-dialog-type' => 'modal',
          ],
        ];

        $items[] = \Drupal::service('flag.link_builder')
        ->build('user', $user_id, 'ngf_follow_user');
      }
      else {
        $items[] = [
          '#type' => 'link',
          '#url' => Url::fromRoute('ngf_user_list.user_lists'),
          '#title' => t('User lists'),
          '#attributes' => [
            'class' => [
              'profile__actions--contact',
            ],
          ],
        ];
      }
      $build['action_panel'] = [
        '#theme' => 'item_list',
        '#items' => $items,
        '#attributes' => [
          'class' => [
            'profile__actions',
          ],
        ],
      ];
    }

    // Show followers panel
    if ($display->getComponent('followers_panel')) {
      $items = [];
      if ($user_id == $current_user->id()) {
        $url_followers = Url::fromRoute('ngf_user_profile.page.followers');
        $url_following = Url::fromRoute('ngf_user_profile.page.following');

        $items[] = [
          '#type' => 'link',
          '#url' => Url::fromRoute('ngf_user_profile.page.saved_content'),
          '#title' => _ngf_user_profile_get_saved_content($entity),
          '#attributes' => [
            'class' => [
              'profile__networks__item profile__followers',
            ],
          ],
        ];
      }
      else {
        $user_options = [
          'user' => $user_id,
        ];
        $url_followers = Url::fromRoute(
          'ngf_user_profile.page.user_followers',
          $user_options
        );
        $url_following = Url::fromRoute(
          'ngf_user_profile.page.user_following',
          $user_options
        );
      }

      $items[] = [
        '#type' => 'link',
        '#url' => $url_followers,
        '#title' => _ngf_user_profile_get_following($entity),
        '#attributes' => [
          'class' => [
            'profile__networks__item profile__following',
          ],
        ],
      ];
      $items[] = [
        '#type' => 'link',
        '#url' => $url_following,
        '#title' => _ngf_user_profile_get_followers($entity),
        '#attributes' => [
          'class' => [
            'profile__networks__item profile__followers',
          ],
        ],
      ];

      $build['followers_panel'] = [
        '#theme' => 'item_list',
        '#items' => $items,
        '#attributes' => [
          'class' => [
            'profile__networks',
          ],
        ],
      ];
    }
  }
}

function _ngf_user_profile_get_following($user) {
  $count = \Drupal::getContainer()
    ->get('ngf_user_profile.user_manager')
    ->getCountFollowingUsersList($user);
  return \Drupal::translation()
    ->formatPlural($count, '1 follower', '@count followers',
      ['@count' => $count]);
}

function _ngf_user_profile_get_followers($user) {
  $count = \Drupal::getContainer()
    ->get('ngf_user_profile.user_manager')
    ->getCountFollowersUsersList($user);
  return t('@count following', ['@count' => $count]);
}

function _ngf_user_profile_get_saved_content($user) {
  $count = \Drupal::getContainer()
    ->get('ngf_user_profile.user_manager')
    ->getCountSavedContent($user);
  return t('@count saved', ['@count' => $count]);
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function ngf_user_profile_menu_local_tasks_alter(&$data, $route_name) {
  $local_tasks = [
    // Hide the members and followers tab, but keep the functionality.
    'ngf_user_profile.link.followers',
    'ngf_user_profile.link.following',
    // Hide contact, members and followers tab, but keep the functionality.
    'ngf_user_profile.link.user_contact',
    'ngf_user_profile.link.user_followers',
    'ngf_user_profile.link.user_following',
    'ngf_user_profile.link.saved_content',
    'ngf_user_profile.link.user_about',
  ];

  foreach ($local_tasks as $local_task) {
    if (isset($data['tabs'][1][$local_task])) {
      $data['tabs'][1][$local_task] = NULL;
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function ngf_user_profile_views_pre_render(ViewExecutable $view) {
  $group_access_manager = \Drupal::getContainer()->get('ngf_group.group_access_manager');
  if ($view->id() == 'ngf_user_publications') {
    foreach ($view->result as $key => $resultRow) {
      if (!$group_access_manager->checkNode($resultRow->_entity)) {
        unset($view->result[$key]);
      }
    }
  }

  if (in_array($view->id(), ['ngf_user_groups', 'ngf_user_events'])) {
    foreach ($view->result as $key => $resultRow) {
      if (!$group_access_manager->checkGroup($resultRow->_entity)) {
        unset($view->result[$key]);
      }
    }
  }
}

/**
 * Implements hook_user_format_name_alter().
 */
function ngf_user_profile_user_format_name_alter(&$name, $account) {
  $user = User::load($account->id());
  if (!empty($user)) {
    if (!empty($user->get('field_ngf_first_name')->value) && !empty($user->get('field_ngf_last_name')->value)) {
      $name = $user->get('field_ngf_first_name')->value . ' ' . $user->get('field_ngf_last_name')->value;
    } else {
      $name = $user->getUserName();
    }
  }
}

/**
 * Implements hook_user_user_login().
 */
function ngf_user_profile_user_login($account) {
  $current_route = \Drupal::routeMatch()->getRouteName();
  if (!in_array($current_route, ['user.reset', 'user.reset.login'])) {
    $response = new RedirectResponse(Url::fromRoute('ngf_user_profile.page.general_settings')
      ->toString());
    $response->send();
  }
}


function ngf_user_profile_form_user_form_alter(&$form, &$form_state) {
  $account = \Drupal::service('current_user');
  // If this is not the Superadmin's edit page
  if ( !empty($account) && ($account->id() != 1) ) {

    // Turn off Current password field's validation
    $form_state->set('user_pass_reset', 1);

    // Hide the Current password fields
    $form['account']['current_pass']['#access'] = FALSE;
  }
}